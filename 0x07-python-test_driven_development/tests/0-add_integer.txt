==============================
 The ``0-add_integer`` module
==============================

 Using ``add_integer``
-----------------------

This is a ``add_integer`` text file in reStructuredText format.
First import ``add_integer`` from the ``0-add_integer`` module:

	>>> add_integer = __import__('0-add_integer').add_integer

Usage:

     Numbers
    =========

    ``add_integer()`` returns the somme of its arguments.  For numbers,
    that value is equivalent to using the ``+`` operator:

	>>> add_integer(1, 2)
	3

	>>> add_integer(1, -5)
	-4

     ``add_integer()`` returns just an int value.  For numbers,
     that value is equivalent to using the ``+`` operator:

	>>> add_integer(100.3, -2)
	98

	>>> add_integer(100.3, 10.4)
        110

     ``add_integer()`` Can handale a Non-number in the seconde arg:

	>>> add_integer(2)
	100


      Non-Numbers
     =============

     ``add_integer()`` Can't handale Non-Numbers:

	>>> add_integer(4, "School")
	Traceback (most recent call last):
            raise TypeError("b must be an integer")
        TypeError: b must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
            raise TypeError("a must be an integer")
        TypeError: a must be an integer

	>>> add_integer('a', 'b')
	Traceback (most recent call last):
            raise TypeError("a must be an integer")
        TypeError: a must be an integer
